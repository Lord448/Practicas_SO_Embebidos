
Selector_de_frecuencia_P1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dec  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f0  080040f0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080040f0  080040f0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040f0  080040f0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080040f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000014  0800410c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  0800410c  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc91  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b13  00000000  00000000  0002bcce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0002d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0002e4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cf0  00000000  00000000  0002f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e83a  00000000  00000000  00046e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa3d  00000000  00000000  00055662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e009f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e8  00000000  00000000  000e00f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080032ec 	.word	0x080032ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080032ec 	.word	0x080032ec

0800014c <main>:
//Always @ 50% of duty cycle
const uint32_t counterperiod[7] = {45000, 22500, 9000, 4500, 2250, 900, 450};
int32_t Frequency_selector;

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000150:	f000 fb7c 	bl	800084c <HAL_Init>
  SystemClock_Config();
 8000154:	f000 f8f4 	bl	8000340 <SystemClock_Config>
  MX_GPIO_Init();
 8000158:	f000 fa08 	bl	800056c <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f936 	bl	80003cc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000160:	f000 f962 	bl	8000428 <MX_TIM1_Init>
  SSD1306_Init();
 8000164:	f002 fdda 	bl	8002d1c <SSD1306_Init>
  SSD1306_GotoXY(8, 11);
 8000168:	210b      	movs	r1, #11
 800016a:	2008      	movs	r0, #8
 800016c:	f002 ff3e 	bl	8002fec <SSD1306_GotoXY>
  SSD1306_Puts("Frecuencia", &Font_11x18, 1);
 8000170:	2201      	movs	r2, #1
 8000172:	494d      	ldr	r1, [pc, #308]	; (80002a8 <main+0x15c>)
 8000174:	484d      	ldr	r0, [pc, #308]	; (80002ac <main+0x160>)
 8000176:	f002 ffcf 	bl	8003118 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800017a:	f002 fe93 	bl	8002ea4 <SSD1306_UpdateScreen>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800017e:	2100      	movs	r1, #0
 8000180:	484b      	ldr	r0, [pc, #300]	; (80002b0 <main+0x164>)
 8000182:	f002 f853 	bl	800222c <HAL_TIM_PWM_Start>
  while (1)
  {
	  Port.PuertoA = (GPIOA -> IDR)&mascara;
 8000186:	4b4b      	ldr	r3, [pc, #300]	; (80002b4 <main+0x168>)
 8000188:	689b      	ldr	r3, [r3, #8]
 800018a:	f003 0303 	and.w	r3, r3, #3
 800018e:	4a4a      	ldr	r2, [pc, #296]	; (80002b8 <main+0x16c>)
 8000190:	6013      	str	r3, [r2, #0]
	  if (Port.PuertoA != Port.AnteriorPuertoA)
 8000192:	4b49      	ldr	r3, [pc, #292]	; (80002b8 <main+0x16c>)
 8000194:	681a      	ldr	r2, [r3, #0]
 8000196:	4b48      	ldr	r3, [pc, #288]	; (80002b8 <main+0x16c>)
 8000198:	685b      	ldr	r3, [r3, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d07d      	beq.n	800029a <main+0x14e>
	  {
		  if(Port.PuertoA == btn_pos)
 800019e:	4b46      	ldr	r3, [pc, #280]	; (80002b8 <main+0x16c>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	2b02      	cmp	r3, #2
 80001a4:	d11e      	bne.n	80001e4 <main+0x98>
		  {
			  Frequency_selector++;
 80001a6:	4b45      	ldr	r3, [pc, #276]	; (80002bc <main+0x170>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	3301      	adds	r3, #1
 80001ac:	4a43      	ldr	r2, [pc, #268]	; (80002bc <main+0x170>)
 80001ae:	6013      	str	r3, [r2, #0]
		  	  if(Frequency_selector>6)
 80001b0:	4b42      	ldr	r3, [pc, #264]	; (80002bc <main+0x170>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2b06      	cmp	r3, #6
 80001b6:	dd02      	ble.n	80001be <main+0x72>
		      {
		  		Frequency_selector=6;
 80001b8:	4b40      	ldr	r3, [pc, #256]	; (80002bc <main+0x170>)
 80001ba:	2206      	movs	r2, #6
 80001bc:	601a      	str	r2, [r3, #0]
		  	  }
		  	  TIM1 -> ARR = counterperiod[Frequency_selector]-1;
 80001be:	4b3f      	ldr	r3, [pc, #252]	; (80002bc <main+0x170>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a3f      	ldr	r2, [pc, #252]	; (80002c0 <main+0x174>)
 80001c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001c8:	4a3e      	ldr	r2, [pc, #248]	; (80002c4 <main+0x178>)
 80001ca:	3b01      	subs	r3, #1
 80001cc:	62d3      	str	r3, [r2, #44]	; 0x2c
		  	  TIM1 -> CCR1 = ((counterperiod[Frequency_selector]-1)/2)-1;//-1 by the zero of the 2 byte variable
 80001ce:	4b3b      	ldr	r3, [pc, #236]	; (80002bc <main+0x170>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a3b      	ldr	r2, [pc, #236]	; (80002c0 <main+0x174>)
 80001d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d8:	3b01      	subs	r3, #1
 80001da:	085b      	lsrs	r3, r3, #1
 80001dc:	4a39      	ldr	r2, [pc, #228]	; (80002c4 <main+0x178>)
 80001de:	3b01      	subs	r3, #1
 80001e0:	6353      	str	r3, [r2, #52]	; 0x34
 80001e2:	e021      	b.n	8000228 <main+0xdc>
		  }
		  else if (Port.PuertoA == btn_ant)
 80001e4:	4b34      	ldr	r3, [pc, #208]	; (80002b8 <main+0x16c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d11d      	bne.n	8000228 <main+0xdc>
		  {
			  Frequency_selector--;
 80001ec:	4b33      	ldr	r3, [pc, #204]	; (80002bc <main+0x170>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	3b01      	subs	r3, #1
 80001f2:	4a32      	ldr	r2, [pc, #200]	; (80002bc <main+0x170>)
 80001f4:	6013      	str	r3, [r2, #0]
		  	  if (Frequency_selector<0)
 80001f6:	4b31      	ldr	r3, [pc, #196]	; (80002bc <main+0x170>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	da02      	bge.n	8000204 <main+0xb8>
		  	  {
		  		Frequency_selector=0;
 80001fe:	4b2f      	ldr	r3, [pc, #188]	; (80002bc <main+0x170>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
		  	  }
		  	  TIM1 -> ARR = counterperiod[Frequency_selector]-1;
 8000204:	4b2d      	ldr	r3, [pc, #180]	; (80002bc <main+0x170>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a2d      	ldr	r2, [pc, #180]	; (80002c0 <main+0x174>)
 800020a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800020e:	4a2d      	ldr	r2, [pc, #180]	; (80002c4 <main+0x178>)
 8000210:	3b01      	subs	r3, #1
 8000212:	62d3      	str	r3, [r2, #44]	; 0x2c
		  	  TIM1 -> CCR1 = ((counterperiod[Frequency_selector]-1)/2)-1;//-1 by the zero of the 2 byte variable
 8000214:	4b29      	ldr	r3, [pc, #164]	; (80002bc <main+0x170>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a29      	ldr	r2, [pc, #164]	; (80002c0 <main+0x174>)
 800021a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021e:	3b01      	subs	r3, #1
 8000220:	085b      	lsrs	r3, r3, #1
 8000222:	4a28      	ldr	r2, [pc, #160]	; (80002c4 <main+0x178>)
 8000224:	3b01      	subs	r3, #1
 8000226:	6353      	str	r3, [r2, #52]	; 0x34
		  }
		  //Printing on the LCD
		  switch(Frequency_selector)
 8000228:	4b24      	ldr	r3, [pc, #144]	; (80002bc <main+0x170>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b06      	cmp	r3, #6
 800022e:	d835      	bhi.n	800029c <main+0x150>
 8000230:	a201      	add	r2, pc, #4	; (adr r2, 8000238 <main+0xec>)
 8000232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000236:	bf00      	nop
 8000238:	08000255 	.word	0x08000255
 800023c:	0800025f 	.word	0x0800025f
 8000240:	08000269 	.word	0x08000269
 8000244:	08000273 	.word	0x08000273
 8000248:	0800027d 	.word	0x0800027d
 800024c:	08000287 	.word	0x08000287
 8000250:	08000291 	.word	0x08000291
		  {
		  	  //All the prints are centered
		  	  case 0:
		  		  Print_Freq("100Hz", 5);
 8000254:	2105      	movs	r1, #5
 8000256:	481c      	ldr	r0, [pc, #112]	; (80002c8 <main+0x17c>)
 8000258:	f000 f844 	bl	80002e4 <Print_Freq>
		  	  break;
 800025c:	e01e      	b.n	800029c <main+0x150>
		  	  case 1:
		  		  Print_Freq("200Hz", 5);
 800025e:	2105      	movs	r1, #5
 8000260:	481a      	ldr	r0, [pc, #104]	; (80002cc <main+0x180>)
 8000262:	f000 f83f 	bl	80002e4 <Print_Freq>
		  	  break;
 8000266:	e019      	b.n	800029c <main+0x150>
		  	  case 2:
		  		  Print_Freq("500Hz", 5);
 8000268:	2105      	movs	r1, #5
 800026a:	4819      	ldr	r0, [pc, #100]	; (80002d0 <main+0x184>)
 800026c:	f000 f83a 	bl	80002e4 <Print_Freq>
		  	  break;
 8000270:	e014      	b.n	800029c <main+0x150>
		  	  case 3:
		  		  Print_Freq("1KHz", 4);
 8000272:	2104      	movs	r1, #4
 8000274:	4817      	ldr	r0, [pc, #92]	; (80002d4 <main+0x188>)
 8000276:	f000 f835 	bl	80002e4 <Print_Freq>
		  	  break;
 800027a:	e00f      	b.n	800029c <main+0x150>
		  	  case 4:
			  	  Print_Freq("2KHz", 4);
 800027c:	2104      	movs	r1, #4
 800027e:	4816      	ldr	r0, [pc, #88]	; (80002d8 <main+0x18c>)
 8000280:	f000 f830 	bl	80002e4 <Print_Freq>
		  	  break;
 8000284:	e00a      	b.n	800029c <main+0x150>
		  	  case 5:
			  	  Print_Freq("5KHz", 4);
 8000286:	2104      	movs	r1, #4
 8000288:	4814      	ldr	r0, [pc, #80]	; (80002dc <main+0x190>)
 800028a:	f000 f82b 	bl	80002e4 <Print_Freq>
		  	  break;
 800028e:	e005      	b.n	800029c <main+0x150>
		  	  case 6:
			  	  Print_Freq("10KHz", 5);
 8000290:	2105      	movs	r1, #5
 8000292:	4813      	ldr	r0, [pc, #76]	; (80002e0 <main+0x194>)
 8000294:	f000 f826 	bl	80002e4 <Print_Freq>
		  	  break;
 8000298:	e000      	b.n	800029c <main+0x150>
		  }
	  }
 800029a:	bf00      	nop
	  Port.AnteriorPuertoA = Port.PuertoA;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <main+0x16c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <main+0x16c>)
 80002a2:	6053      	str	r3, [r2, #4]
	  Port.PuertoA = (GPIOA -> IDR)&mascara;
 80002a4:	e76f      	b.n	8000186 <main+0x3a>
 80002a6:	bf00      	nop
 80002a8:	2000000c 	.word	0x2000000c
 80002ac:	08003304 	.word	0x08003304
 80002b0:	20000030 	.word	0x20000030
 80002b4:	40010800 	.word	0x40010800
 80002b8:	200000cc 	.word	0x200000cc
 80002bc:	200000d4 	.word	0x200000d4
 80002c0:	08003360 	.word	0x08003360
 80002c4:	40012c00 	.word	0x40012c00
 80002c8:	08003310 	.word	0x08003310
 80002cc:	08003318 	.word	0x08003318
 80002d0:	08003320 	.word	0x08003320
 80002d4:	08003328 	.word	0x08003328
 80002d8:	08003330 	.word	0x08003330
 80002dc:	08003338 	.word	0x08003338
 80002e0:	08003340 	.word	0x08003340

080002e4 <Print_Freq>:
  }
}

void Print_Freq(char String[5], uint16_t NumChars)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
	SSD1306_GotoXY(36, 33);
 80002f0:	2121      	movs	r1, #33	; 0x21
 80002f2:	2024      	movs	r0, #36	; 0x24
 80002f4:	f002 fe7a 	bl	8002fec <SSD1306_GotoXY>
	SSD1306_Puts("     ", &Font_11x18, 1); //Erasing the last print
 80002f8:	2201      	movs	r2, #1
 80002fa:	490f      	ldr	r1, [pc, #60]	; (8000338 <Print_Freq+0x54>)
 80002fc:	480f      	ldr	r0, [pc, #60]	; (800033c <Print_Freq+0x58>)
 80002fe:	f002 ff0b 	bl	8003118 <SSD1306_Puts>
	if(NumChars == 5) //For centering the chars
 8000302:	887b      	ldrh	r3, [r7, #2]
 8000304:	2b05      	cmp	r3, #5
 8000306:	d104      	bne.n	8000312 <Print_Freq+0x2e>
		SSD1306_GotoXY(36, 33);
 8000308:	2121      	movs	r1, #33	; 0x21
 800030a:	2024      	movs	r0, #36	; 0x24
 800030c:	f002 fe6e 	bl	8002fec <SSD1306_GotoXY>
 8000310:	e006      	b.n	8000320 <Print_Freq+0x3c>
	else if(NumChars == 4)
 8000312:	887b      	ldrh	r3, [r7, #2]
 8000314:	2b04      	cmp	r3, #4
 8000316:	d103      	bne.n	8000320 <Print_Freq+0x3c>
		SSD1306_GotoXY(41, 33);
 8000318:	2121      	movs	r1, #33	; 0x21
 800031a:	2029      	movs	r0, #41	; 0x29
 800031c:	f002 fe66 	bl	8002fec <SSD1306_GotoXY>
	SSD1306_Puts(String, &Font_11x18, 1);
 8000320:	2201      	movs	r2, #1
 8000322:	4905      	ldr	r1, [pc, #20]	; (8000338 <Print_Freq+0x54>)
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f002 fef7 	bl	8003118 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800032a:	f002 fdbb 	bl	8002ea4 <SSD1306_UpdateScreen>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	2000000c 	.word	0x2000000c
 800033c:	08003348 	.word	0x08003348

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b090      	sub	sp, #64	; 0x40
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	f107 0318 	add.w	r3, r7, #24
 800034a:	2228      	movs	r2, #40	; 0x28
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f002 ffc4 	bl	80032dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000362:	2301      	movs	r3, #1
 8000364:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000370:	2301      	movs	r3, #1
 8000372:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000374:	2302      	movs	r3, #2
 8000376:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800037e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000382:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000384:	f107 0318 	add.w	r3, r7, #24
 8000388:	4618      	mov	r0, r3
 800038a:	f001 faa1 	bl	80018d0 <HAL_RCC_OscConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000394:	f000 f92c 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000398:	230f      	movs	r3, #15
 800039a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039c:	2302      	movs	r3, #2
 800039e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2102      	movs	r1, #2
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fd0e 	bl	8001dd4 <HAL_RCC_ClockConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003be:	f000 f917 	bl	80005f0 <Error_Handler>
  }
}
 80003c2:	bf00      	nop
 80003c4:	3740      	adds	r7, #64	; 0x40
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_I2C1_Init+0x50>)
 80003d2:	4a13      	ldr	r2, [pc, #76]	; (8000420 <MX_I2C1_Init+0x54>)
 80003d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_I2C1_Init+0x50>)
 80003d8:	4a12      	ldr	r2, [pc, #72]	; (8000424 <MX_I2C1_Init+0x58>)
 80003da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_I2C1_Init+0x50>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_I2C1_Init+0x50>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_I2C1_Init+0x50>)
 80003ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <MX_I2C1_Init+0x50>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_I2C1_Init+0x50>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <MX_I2C1_Init+0x50>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_I2C1_Init+0x50>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000408:	4804      	ldr	r0, [pc, #16]	; (800041c <MX_I2C1_Init+0x50>)
 800040a:	f000 fce9 	bl	8000de0 <HAL_I2C_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000414:	f000 f8ec 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000078 	.word	0x20000078
 8000420:	40005400 	.word	0x40005400
 8000424:	00061a80 	.word	0x00061a80

08000428 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b096      	sub	sp, #88	; 0x58
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800042e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]
 8000456:	615a      	str	r2, [r3, #20]
 8000458:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2220      	movs	r2, #32
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f002 ff3b 	bl	80032dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000466:	4b3f      	ldr	r3, [pc, #252]	; (8000564 <MX_TIM1_Init+0x13c>)
 8000468:	4a3f      	ldr	r2, [pc, #252]	; (8000568 <MX_TIM1_Init+0x140>)
 800046a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800046c:	4b3d      	ldr	r3, [pc, #244]	; (8000564 <MX_TIM1_Init+0x13c>)
 800046e:	220f      	movs	r2, #15
 8000470:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000472:	4b3c      	ldr	r3, [pc, #240]	; (8000564 <MX_TIM1_Init+0x13c>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 45000-1;
 8000478:	4b3a      	ldr	r3, [pc, #232]	; (8000564 <MX_TIM1_Init+0x13c>)
 800047a:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800047e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	4b38      	ldr	r3, [pc, #224]	; (8000564 <MX_TIM1_Init+0x13c>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000486:	4b37      	ldr	r3, [pc, #220]	; (8000564 <MX_TIM1_Init+0x13c>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800048c:	4b35      	ldr	r3, [pc, #212]	; (8000564 <MX_TIM1_Init+0x13c>)
 800048e:	2280      	movs	r2, #128	; 0x80
 8000490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000492:	4834      	ldr	r0, [pc, #208]	; (8000564 <MX_TIM1_Init+0x13c>)
 8000494:	f001 fe22 	bl	80020dc <HAL_TIM_Base_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800049e:	f000 f8a7 	bl	80005f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004ac:	4619      	mov	r1, r3
 80004ae:	482d      	ldr	r0, [pc, #180]	; (8000564 <MX_TIM1_Init+0x13c>)
 80004b0:	f002 f81c 	bl	80024ec <HAL_TIM_ConfigClockSource>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80004ba:	f000 f899 	bl	80005f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004be:	4829      	ldr	r0, [pc, #164]	; (8000564 <MX_TIM1_Init+0x13c>)
 80004c0:	f001 fe5b 	bl	800217a <HAL_TIM_PWM_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80004ca:	f000 f891 	bl	80005f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ce:	2300      	movs	r3, #0
 80004d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004da:	4619      	mov	r1, r3
 80004dc:	4821      	ldr	r0, [pc, #132]	; (8000564 <MX_TIM1_Init+0x13c>)
 80004de:	f002 fb6d 	bl	8002bbc <HAL_TIMEx_MasterConfigSynchronization>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004e8:	f000 f882 	bl	80005f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ec:	2360      	movs	r3, #96	; 0x60
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 22500-1;
 80004f0:	f245 73e3 	movw	r3, #22499	; 0x57e3
 80004f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f6:	2300      	movs	r3, #0
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004fa:	2300      	movs	r3, #0
 80004fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000502:	2300      	movs	r3, #0
 8000504:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000506:	2300      	movs	r3, #0
 8000508:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800050a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050e:	2200      	movs	r2, #0
 8000510:	4619      	mov	r1, r3
 8000512:	4814      	ldr	r0, [pc, #80]	; (8000564 <MX_TIM1_Init+0x13c>)
 8000514:	f001 ff2c 	bl	8002370 <HAL_TIM_PWM_ConfigChannel>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800051e:	f000 f867 	bl	80005f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800053a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4619      	mov	r1, r3
 8000544:	4807      	ldr	r0, [pc, #28]	; (8000564 <MX_TIM1_Init+0x13c>)
 8000546:	f002 fb97 	bl	8002c78 <HAL_TIMEx_ConfigBreakDeadTime>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000550:	f000 f84e 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <MX_TIM1_Init+0x13c>)
 8000556:	f000 f8f1 	bl	800073c <HAL_TIM_MspPostInit>

}
 800055a:	bf00      	nop
 800055c:	3758      	adds	r7, #88	; 0x58
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000030 	.word	0x20000030
 8000568:	40012c00 	.word	0x40012c00

0800056c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0310 	add.w	r3, r7, #16
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <MX_GPIO_Init+0x7c>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <MX_GPIO_Init+0x7c>)
 8000586:	f043 0320 	orr.w	r3, r3, #32
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <MX_GPIO_Init+0x7c>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0320 	and.w	r3, r3, #32
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <MX_GPIO_Init+0x7c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <MX_GPIO_Init+0x7c>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <MX_GPIO_Init+0x7c>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b0:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <MX_GPIO_Init+0x7c>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <MX_GPIO_Init+0x7c>)
 80005b6:	f043 0308 	orr.w	r3, r3, #8
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <MX_GPIO_Init+0x7c>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0308 	and.w	r3, r3, #8
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005c8:	2303      	movs	r3, #3
 80005ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_GPIO_Init+0x80>)
 80005dc:	f000 fa7c 	bl	8000ad8 <HAL_GPIO_Init>

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010800 	.word	0x40010800

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_MspInit+0x5c>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a14      	ldr	r2, [pc, #80]	; (8000658 <HAL_MspInit+0x5c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_MspInit+0x5c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_MspInit+0x5c>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <HAL_MspInit+0x5c>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <HAL_MspInit+0x5c>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_MspInit+0x60>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_MspInit+0x60>)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	40021000 	.word	0x40021000
 800065c:	40010000 	.word	0x40010000

08000660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <HAL_I2C_MspInit+0x90>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d132      	bne.n	80006e6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <HAL_I2C_MspInit+0x94>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <HAL_I2C_MspInit+0x94>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <HAL_I2C_MspInit+0x94>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0308 	and.w	r3, r3, #8
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000698:	f44f 7340 	mov.w	r3, #768	; 0x300
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800069e:	2312      	movs	r3, #18
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4812      	ldr	r0, [pc, #72]	; (80006f8 <HAL_I2C_MspInit+0x98>)
 80006ae:	f000 fa13 	bl	8000ad8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_I2C_MspInit+0x9c>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
 80006b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
 80006c8:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <HAL_I2C_MspInit+0x9c>)
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_I2C_MspInit+0x94>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_I2C_MspInit+0x94>)
 80006d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_I2C_MspInit+0x94>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40005400 	.word	0x40005400
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010c00 	.word	0x40010c00
 80006fc:	40010000 	.word	0x40010000

08000700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a09      	ldr	r2, [pc, #36]	; (8000734 <HAL_TIM_Base_MspInit+0x34>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d10b      	bne.n	800072a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_TIM_Base_MspInit+0x38>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <HAL_TIM_Base_MspInit+0x38>)
 8000718:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800071c:	6193      	str	r3, [r2, #24]
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_TIM_Base_MspInit+0x38>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40012c00 	.word	0x40012c00
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a10      	ldr	r2, [pc, #64]	; (8000798 <HAL_TIM_MspPostInit+0x5c>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d118      	bne.n	800078e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_TIM_MspPostInit+0x60>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <HAL_TIM_MspPostInit+0x60>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_TIM_MspPostInit+0x60>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0304 	and.w	r3, r3, #4
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000778:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2302      	movs	r3, #2
 8000780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <HAL_TIM_MspPostInit+0x64>)
 800078a:	f000 f9a5 	bl	8000ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40012c00 	.word	0x40012c00
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010800 	.word	0x40010800

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ea:	f000 f875 	bl	80008d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
	...

08000800 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	; (8000838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	; (8000844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000826:	f7ff ffe4 	bl	80007f2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800082a:	f002 fd33 	bl	8003294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082e:	f7ff fc8d 	bl	800014c <main>
  bx lr
 8000832:	4770      	bx	lr
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800083c:	080040f8 	.word	0x080040f8
  ldr r2, =_sbss
 8000840:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000844:	200004e4 	.word	0x200004e4

08000848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_2_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_Init+0x28>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <HAL_Init+0x28>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f907 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000862:	200f      	movs	r0, #15
 8000864:	f000 f808 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff fec8 	bl	80005fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40022000 	.word	0x40022000

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x54>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_InitTick+0x58>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000892:	fbb2 f3f3 	udiv	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f911 	bl	8000abe <HAL_SYSTICK_Config>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00e      	b.n	80008c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d80a      	bhi.n	80008c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b4:	f000 f8e7 	bl	8000a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_InitTick+0x5c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000004 	.word	0x20000004

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x1c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_IncTick+0x20>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a03      	ldr	r2, [pc, #12]	; (80008f8 <HAL_IncTick+0x20>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	20000008 	.word	0x20000008
 80008f8:	200000d8 	.word	0x200000d8

080008fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b02      	ldr	r3, [pc, #8]	; (800090c <HAL_GetTick+0x10>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	200000d8 	.word	0x200000d8

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	; (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	; (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
         );
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	; 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a3c:	d301      	bcc.n	8000a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00f      	b.n	8000a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <SysTick_Config+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a50:	f7ff ff90 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SysTick_Config+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <SysTick_Config+0x40>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff49 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff5e 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff90 	bl	80009c8 <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff5f 	bl	8000974 <__NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff ffb0 	bl	8000a2c <SysTick_Config>
 8000acc:	4603      	mov	r3, r0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b08b      	sub	sp, #44	; 0x2c
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aea:	e169      	b.n	8000dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aec:	2201      	movs	r2, #1
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	69fa      	ldr	r2, [r7, #28]
 8000afc:	4013      	ands	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f040 8158 	bne.w	8000dba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	4a9a      	ldr	r2, [pc, #616]	; (8000d78 <HAL_GPIO_Init+0x2a0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d05e      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b14:	4a98      	ldr	r2, [pc, #608]	; (8000d78 <HAL_GPIO_Init+0x2a0>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d875      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b1a:	4a98      	ldr	r2, [pc, #608]	; (8000d7c <HAL_GPIO_Init+0x2a4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d058      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b20:	4a96      	ldr	r2, [pc, #600]	; (8000d7c <HAL_GPIO_Init+0x2a4>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d86f      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b26:	4a96      	ldr	r2, [pc, #600]	; (8000d80 <HAL_GPIO_Init+0x2a8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d052      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b2c:	4a94      	ldr	r2, [pc, #592]	; (8000d80 <HAL_GPIO_Init+0x2a8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d869      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b32:	4a94      	ldr	r2, [pc, #592]	; (8000d84 <HAL_GPIO_Init+0x2ac>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d04c      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b38:	4a92      	ldr	r2, [pc, #584]	; (8000d84 <HAL_GPIO_Init+0x2ac>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d863      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b3e:	4a92      	ldr	r2, [pc, #584]	; (8000d88 <HAL_GPIO_Init+0x2b0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d046      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b44:	4a90      	ldr	r2, [pc, #576]	; (8000d88 <HAL_GPIO_Init+0x2b0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d85d      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b4a:	2b12      	cmp	r3, #18
 8000b4c:	d82a      	bhi.n	8000ba4 <HAL_GPIO_Init+0xcc>
 8000b4e:	2b12      	cmp	r3, #18
 8000b50:	d859      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b52:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <HAL_GPIO_Init+0x80>)
 8000b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b58:	08000bd3 	.word	0x08000bd3
 8000b5c:	08000bad 	.word	0x08000bad
 8000b60:	08000bbf 	.word	0x08000bbf
 8000b64:	08000c01 	.word	0x08000c01
 8000b68:	08000c07 	.word	0x08000c07
 8000b6c:	08000c07 	.word	0x08000c07
 8000b70:	08000c07 	.word	0x08000c07
 8000b74:	08000c07 	.word	0x08000c07
 8000b78:	08000c07 	.word	0x08000c07
 8000b7c:	08000c07 	.word	0x08000c07
 8000b80:	08000c07 	.word	0x08000c07
 8000b84:	08000c07 	.word	0x08000c07
 8000b88:	08000c07 	.word	0x08000c07
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000c07 	.word	0x08000c07
 8000b94:	08000c07 	.word	0x08000c07
 8000b98:	08000c07 	.word	0x08000c07
 8000b9c:	08000bb5 	.word	0x08000bb5
 8000ba0:	08000bc9 	.word	0x08000bc9
 8000ba4:	4a79      	ldr	r2, [pc, #484]	; (8000d8c <HAL_GPIO_Init+0x2b4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d013      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000baa:	e02c      	b.n	8000c06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	623b      	str	r3, [r7, #32]
          break;
 8000bb2:	e029      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	623b      	str	r3, [r7, #32]
          break;
 8000bbc:	e024      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	623b      	str	r3, [r7, #32]
          break;
 8000bc6:	e01f      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	330c      	adds	r3, #12
 8000bce:	623b      	str	r3, [r7, #32]
          break;
 8000bd0:	e01a      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d102      	bne.n	8000be0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e013      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d105      	bne.n	8000bf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be8:	2308      	movs	r3, #8
 8000bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	611a      	str	r2, [r3, #16]
          break;
 8000bf2:	e009      	b.n	8000c08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69fa      	ldr	r2, [r7, #28]
 8000bfc:	615a      	str	r2, [r3, #20]
          break;
 8000bfe:	e003      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e000      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          break;
 8000c06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	2bff      	cmp	r3, #255	; 0xff
 8000c0c:	d801      	bhi.n	8000c12 <HAL_GPIO_Init+0x13a>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	e001      	b.n	8000c16 <HAL_GPIO_Init+0x13e>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3304      	adds	r3, #4
 8000c16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2bff      	cmp	r3, #255	; 0xff
 8000c1c:	d802      	bhi.n	8000c24 <HAL_GPIO_Init+0x14c>
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	e002      	b.n	8000c2a <HAL_GPIO_Init+0x152>
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	3b08      	subs	r3, #8
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	210f      	movs	r1, #15
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	6a39      	ldr	r1, [r7, #32]
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	431a      	orrs	r2, r3
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 80b1 	beq.w	8000dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c58:	4b4d      	ldr	r3, [pc, #308]	; (8000d90 <HAL_GPIO_Init+0x2b8>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a4c      	ldr	r2, [pc, #304]	; (8000d90 <HAL_GPIO_Init+0x2b8>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b4a      	ldr	r3, [pc, #296]	; (8000d90 <HAL_GPIO_Init+0x2b8>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c70:	4a48      	ldr	r2, [pc, #288]	; (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	3302      	adds	r3, #2
 8000c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	220f      	movs	r2, #15
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a40      	ldr	r2, [pc, #256]	; (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d013      	beq.n	8000cc4 <HAL_GPIO_Init+0x1ec>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a3f      	ldr	r2, [pc, #252]	; (8000d9c <HAL_GPIO_Init+0x2c4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d00d      	beq.n	8000cc0 <HAL_GPIO_Init+0x1e8>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a3e      	ldr	r2, [pc, #248]	; (8000da0 <HAL_GPIO_Init+0x2c8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d007      	beq.n	8000cbc <HAL_GPIO_Init+0x1e4>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a3d      	ldr	r2, [pc, #244]	; (8000da4 <HAL_GPIO_Init+0x2cc>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d101      	bne.n	8000cb8 <HAL_GPIO_Init+0x1e0>
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e006      	b.n	8000cc6 <HAL_GPIO_Init+0x1ee>
 8000cb8:	2304      	movs	r3, #4
 8000cba:	e004      	b.n	8000cc6 <HAL_GPIO_Init+0x1ee>
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	e002      	b.n	8000cc6 <HAL_GPIO_Init+0x1ee>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <HAL_GPIO_Init+0x1ee>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cc8:	f002 0203 	and.w	r2, r2, #3
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	4093      	lsls	r3, r2
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cd6:	492f      	ldr	r1, [pc, #188]	; (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3302      	adds	r3, #2
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	492c      	ldr	r1, [pc, #176]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	600b      	str	r3, [r1, #0]
 8000cfc:	e006      	b.n	8000d0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4928      	ldr	r1, [pc, #160]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d006      	beq.n	8000d26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d18:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	4922      	ldr	r1, [pc, #136]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	604b      	str	r3, [r1, #4]
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	491e      	ldr	r1, [pc, #120]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d30:	4013      	ands	r3, r2
 8000d32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	4918      	ldr	r1, [pc, #96]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	608b      	str	r3, [r1, #8]
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	4914      	ldr	r1, [pc, #80]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d58:	4013      	ands	r3, r2
 8000d5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d021      	beq.n	8000dac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	490e      	ldr	r1, [pc, #56]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	60cb      	str	r3, [r1, #12]
 8000d74:	e021      	b.n	8000dba <HAL_GPIO_Init+0x2e2>
 8000d76:	bf00      	nop
 8000d78:	10320000 	.word	0x10320000
 8000d7c:	10310000 	.word	0x10310000
 8000d80:	10220000 	.word	0x10220000
 8000d84:	10210000 	.word	0x10210000
 8000d88:	10120000 	.word	0x10120000
 8000d8c:	10110000 	.word	0x10110000
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40010c00 	.word	0x40010c00
 8000da0:	40011000 	.word	0x40011000
 8000da4:	40011400 	.word	0x40011400
 8000da8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_GPIO_Init+0x304>)
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	4909      	ldr	r1, [pc, #36]	; (8000ddc <HAL_GPIO_Init+0x304>)
 8000db6:	4013      	ands	r3, r2
 8000db8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f47f ae8e 	bne.w	8000aec <HAL_GPIO_Init+0x14>
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	372c      	adds	r7, #44	; 0x2c
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40010400 	.word	0x40010400

08000de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e12b      	b.n	800104a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d106      	bne.n	8000e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff fc2a 	bl	8000660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2224      	movs	r2, #36	; 0x24
 8000e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0201 	bic.w	r2, r2, #1
 8000e22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e44:	f001 f918 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8000e48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4a81      	ldr	r2, [pc, #516]	; (8001054 <HAL_I2C_Init+0x274>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d807      	bhi.n	8000e64 <HAL_I2C_Init+0x84>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4a80      	ldr	r2, [pc, #512]	; (8001058 <HAL_I2C_Init+0x278>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	bf94      	ite	ls
 8000e5c:	2301      	movls	r3, #1
 8000e5e:	2300      	movhi	r3, #0
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	e006      	b.n	8000e72 <HAL_I2C_Init+0x92>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4a7d      	ldr	r2, [pc, #500]	; (800105c <HAL_I2C_Init+0x27c>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	bf94      	ite	ls
 8000e6c:	2301      	movls	r3, #1
 8000e6e:	2300      	movhi	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e0e7      	b.n	800104a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4a78      	ldr	r2, [pc, #480]	; (8001060 <HAL_I2C_Init+0x280>)
 8000e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e82:	0c9b      	lsrs	r3, r3, #18
 8000e84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68ba      	ldr	r2, [r7, #8]
 8000e96:	430a      	orrs	r2, r1
 8000e98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4a6a      	ldr	r2, [pc, #424]	; (8001054 <HAL_I2C_Init+0x274>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d802      	bhi.n	8000eb4 <HAL_I2C_Init+0xd4>
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	e009      	b.n	8000ec8 <HAL_I2C_Init+0xe8>
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	4a69      	ldr	r2, [pc, #420]	; (8001064 <HAL_I2C_Init+0x284>)
 8000ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec4:	099b      	lsrs	r3, r3, #6
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000eda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	495c      	ldr	r1, [pc, #368]	; (8001054 <HAL_I2C_Init+0x274>)
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d819      	bhi.n	8000f1c <HAL_I2C_Init+0x13c>
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	1e59      	subs	r1, r3, #1
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef6:	1c59      	adds	r1, r3, #1
 8000ef8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000efc:	400b      	ands	r3, r1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00a      	beq.n	8000f18 <HAL_I2C_Init+0x138>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	1e59      	subs	r1, r3, #1
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f10:	3301      	adds	r3, #1
 8000f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f16:	e051      	b.n	8000fbc <HAL_I2C_Init+0x1dc>
 8000f18:	2304      	movs	r3, #4
 8000f1a:	e04f      	b.n	8000fbc <HAL_I2C_Init+0x1dc>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d111      	bne.n	8000f48 <HAL_I2C_Init+0x168>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	1e58      	subs	r0, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6859      	ldr	r1, [r3, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	440b      	add	r3, r1
 8000f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f36:	3301      	adds	r3, #1
 8000f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bf0c      	ite	eq
 8000f40:	2301      	moveq	r3, #1
 8000f42:	2300      	movne	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	e012      	b.n	8000f6e <HAL_I2C_Init+0x18e>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	1e58      	subs	r0, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6859      	ldr	r1, [r3, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	0099      	lsls	r1, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f5e:	3301      	adds	r3, #1
 8000f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bf0c      	ite	eq
 8000f68:	2301      	moveq	r3, #1
 8000f6a:	2300      	movne	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_I2C_Init+0x196>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e022      	b.n	8000fbc <HAL_I2C_Init+0x1dc>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10e      	bne.n	8000f9c <HAL_I2C_Init+0x1bc>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1e58      	subs	r0, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6859      	ldr	r1, [r3, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	440b      	add	r3, r1
 8000f8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f90:	3301      	adds	r3, #1
 8000f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f9a:	e00f      	b.n	8000fbc <HAL_I2C_Init+0x1dc>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	1e58      	subs	r0, r3, #1
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6859      	ldr	r1, [r3, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	0099      	lsls	r1, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	6809      	ldr	r1, [r1, #0]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69da      	ldr	r2, [r3, #28]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000fea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6911      	ldr	r1, [r2, #16]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68d2      	ldr	r2, [r2, #12]
 8000ff6:	4311      	orrs	r1, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695a      	ldr	r2, [r3, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	430a      	orrs	r2, r1
 800101a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0201 	orr.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2220      	movs	r2, #32
 8001036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	000186a0 	.word	0x000186a0
 8001058:	001e847f 	.word	0x001e847f
 800105c:	003d08ff 	.word	0x003d08ff
 8001060:	431bde83 	.word	0x431bde83
 8001064:	10624dd3 	.word	0x10624dd3

08001068 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af02      	add	r7, sp, #8
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	461a      	mov	r2, r3
 8001074:	460b      	mov	r3, r1
 8001076:	817b      	strh	r3, [r7, #10]
 8001078:	4613      	mov	r3, r2
 800107a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff fc3e 	bl	80008fc <HAL_GetTick>
 8001080:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b20      	cmp	r3, #32
 800108c:	f040 80e0 	bne.w	8001250 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2319      	movs	r3, #25
 8001096:	2201      	movs	r2, #1
 8001098:	4970      	ldr	r1, [pc, #448]	; (800125c <HAL_I2C_Master_Transmit+0x1f4>)
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f000 fa92 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80010a6:	2302      	movs	r3, #2
 80010a8:	e0d3      	b.n	8001252 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <HAL_I2C_Master_Transmit+0x50>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e0cc      	b.n	8001252 <HAL_I2C_Master_Transmit+0x1ea>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d007      	beq.n	80010de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 0201 	orr.w	r2, r2, #1
 80010dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2221      	movs	r2, #33	; 0x21
 80010f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2210      	movs	r2, #16
 80010fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	893a      	ldrh	r2, [r7, #8]
 800110e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001114:	b29a      	uxth	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4a50      	ldr	r2, [pc, #320]	; (8001260 <HAL_I2C_Master_Transmit+0x1f8>)
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001120:	8979      	ldrh	r1, [r7, #10]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	6a3a      	ldr	r2, [r7, #32]
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f000 f9ca 	bl	80014c0 <I2C_MasterRequestWrite>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e08d      	b.n	8001252 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800114c:	e066      	b.n	800121c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	6a39      	ldr	r1, [r7, #32]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 fb0c 	bl	8001770 <I2C_WaitOnTXEFlagUntilTimeout>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00d      	beq.n	800117a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	2b04      	cmp	r3, #4
 8001164:	d107      	bne.n	8001176 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001174:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e06b      	b.n	8001252 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001194:	b29b      	uxth	r3, r3
 8001196:	3b01      	subs	r3, #1
 8001198:	b29a      	uxth	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d11b      	bne.n	80011f0 <HAL_I2C_Master_Transmit+0x188>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d017      	beq.n	80011f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011da:	b29b      	uxth	r3, r3
 80011dc:	3b01      	subs	r3, #1
 80011de:	b29a      	uxth	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e8:	3b01      	subs	r3, #1
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	6a39      	ldr	r1, [r7, #32]
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f000 fafc 	bl	80017f2 <I2C_WaitOnBTFFlagUntilTimeout>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00d      	beq.n	800121c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	2b04      	cmp	r3, #4
 8001206:	d107      	bne.n	8001218 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001216:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e01a      	b.n	8001252 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001220:	2b00      	cmp	r3, #0
 8001222:	d194      	bne.n	800114e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2220      	movs	r2, #32
 8001238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	e000      	b.n	8001252 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001250:	2302      	movs	r3, #2
  }
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	00100002 	.word	0x00100002
 8001260:	ffff0000 	.word	0xffff0000

08001264 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af02      	add	r7, sp, #8
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	460b      	mov	r3, r1
 8001272:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff fb42 	bl	80008fc <HAL_GetTick>
 8001278:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800127a:	2301      	movs	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b20      	cmp	r3, #32
 8001288:	f040 8111 	bne.w	80014ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2319      	movs	r3, #25
 8001292:	2201      	movs	r2, #1
 8001294:	4988      	ldr	r1, [pc, #544]	; (80014b8 <HAL_I2C_IsDeviceReady+0x254>)
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f994 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80012a2:	2302      	movs	r3, #2
 80012a4:	e104      	b.n	80014b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_I2C_IsDeviceReady+0x50>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e0fd      	b.n	80014b0 <HAL_I2C_IsDeviceReady+0x24c>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d007      	beq.n	80012da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0201 	orr.w	r2, r2, #1
 80012d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2224      	movs	r2, #36	; 0x24
 80012ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4a70      	ldr	r2, [pc, #448]	; (80014bc <HAL_I2C_IsDeviceReady+0x258>)
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800130c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f952 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00d      	beq.n	8001342 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001334:	d103      	bne.n	800133e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e0b6      	b.n	80014b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001342:	897b      	ldrh	r3, [r7, #10]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001350:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001352:	f7ff fad3 	bl	80008fc <HAL_GetTick>
 8001356:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b02      	cmp	r3, #2
 8001364:	bf0c      	ite	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	2300      	movne	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137c:	bf0c      	ite	eq
 800137e:	2301      	moveq	r3, #1
 8001380:	2300      	movne	r3, #0
 8001382:	b2db      	uxtb	r3, r3
 8001384:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001386:	e025      	b.n	80013d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001388:	f7ff fab8 	bl	80008fc <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d302      	bcc.n	800139e <HAL_I2C_IsDeviceReady+0x13a>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d103      	bne.n	80013a6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	22a0      	movs	r2, #160	; 0xa0
 80013a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	bf0c      	ite	eq
 80013b4:	2301      	moveq	r3, #1
 80013b6:	2300      	movne	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ca:	bf0c      	ite	eq
 80013cc:	2301      	moveq	r3, #1
 80013ce:	2300      	movne	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2ba0      	cmp	r3, #160	; 0xa0
 80013de:	d005      	beq.n	80013ec <HAL_I2C_IsDeviceReady+0x188>
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <HAL_I2C_IsDeviceReady+0x188>
 80013e6:	7dbb      	ldrb	r3, [r7, #22]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0cd      	beq.n	8001388 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2220      	movs	r2, #32
 80013f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d129      	bne.n	8001456 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001410:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2319      	movs	r3, #25
 800142e:	2201      	movs	r2, #1
 8001430:	4921      	ldr	r1, [pc, #132]	; (80014b8 <HAL_I2C_IsDeviceReady+0x254>)
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f000 f8c6 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e036      	b.n	80014b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2220      	movs	r2, #32
 8001446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e02c      	b.n	80014b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001464:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800146e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2319      	movs	r3, #25
 8001476:	2201      	movs	r2, #1
 8001478:	490f      	ldr	r1, [pc, #60]	; (80014b8 <HAL_I2C_IsDeviceReady+0x254>)
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f8a2 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e012      	b.n	80014b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	3301      	adds	r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	f4ff af32 	bcc.w	80012fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2220      	movs	r2, #32
 800149e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80014ae:	2302      	movs	r3, #2
  }
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	00100002 	.word	0x00100002
 80014bc:	ffff0000 	.word	0xffff0000

080014c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	460b      	mov	r3, r1
 80014ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d006      	beq.n	80014ea <I2C_MasterRequestWrite+0x2a>
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d003      	beq.n	80014ea <I2C_MasterRequestWrite+0x2a>
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014e8:	d108      	bne.n	80014fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e00b      	b.n	8001514 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	2b12      	cmp	r3, #18
 8001502:	d107      	bne.n	8001514 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001512:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f84f 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00d      	beq.n	8001548 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800153a:	d103      	bne.n	8001544 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e035      	b.n	80015b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001550:	d108      	bne.n	8001564 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001552:	897b      	ldrh	r3, [r7, #10]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	e01b      	b.n	800159c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001564:	897b      	ldrh	r3, [r7, #10]
 8001566:	11db      	asrs	r3, r3, #7
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0306 	and.w	r3, r3, #6
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f063 030f 	orn	r3, r3, #15
 8001574:	b2da      	uxtb	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	490e      	ldr	r1, [pc, #56]	; (80015bc <I2C_MasterRequestWrite+0xfc>)
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f000 f875 	bl	8001672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e010      	b.n	80015b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001592:	897b      	ldrh	r3, [r7, #10]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4907      	ldr	r1, [pc, #28]	; (80015c0 <I2C_MasterRequestWrite+0x100>)
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f865 	bl	8001672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	00010008 	.word	0x00010008
 80015c0:	00010002 	.word	0x00010002

080015c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	4613      	mov	r3, r2
 80015d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015d4:	e025      	b.n	8001622 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015dc:	d021      	beq.n	8001622 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015de:	f7ff f98d 	bl	80008fc <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d302      	bcc.n	80015f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d116      	bne.n	8001622 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f043 0220 	orr.w	r2, r3, #32
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e023      	b.n	800166a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	0c1b      	lsrs	r3, r3, #16
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b01      	cmp	r3, #1
 800162a:	d10d      	bne.n	8001648 <I2C_WaitOnFlagUntilTimeout+0x84>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4013      	ands	r3, r2
 8001638:	b29b      	uxth	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	bf0c      	ite	eq
 800163e:	2301      	moveq	r3, #1
 8001640:	2300      	movne	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	e00c      	b.n	8001662 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4013      	ands	r3, r2
 8001654:	b29b      	uxth	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf0c      	ite	eq
 800165a:	2301      	moveq	r3, #1
 800165c:	2300      	movne	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	429a      	cmp	r2, r3
 8001666:	d0b6      	beq.n	80015d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001680:	e051      	b.n	8001726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001690:	d123      	bne.n	80016da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2220      	movs	r2, #32
 80016b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f043 0204 	orr.w	r2, r3, #4
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e046      	b.n	8001768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016e0:	d021      	beq.n	8001726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016e2:	f7ff f90b 	bl	80008fc <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d302      	bcc.n	80016f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d116      	bne.n	8001726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f043 0220 	orr.w	r2, r3, #32
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e020      	b.n	8001768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	0c1b      	lsrs	r3, r3, #16
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b01      	cmp	r3, #1
 800172e:	d10c      	bne.n	800174a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4013      	ands	r3, r2
 800173c:	b29b      	uxth	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf14      	ite	ne
 8001742:	2301      	movne	r3, #1
 8001744:	2300      	moveq	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	e00b      	b.n	8001762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	43da      	mvns	r2, r3
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	4013      	ands	r3, r2
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d18d      	bne.n	8001682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800177c:	e02d      	b.n	80017da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f878 	bl	8001874 <I2C_IsAcknowledgeFailed>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e02d      	b.n	80017ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001794:	d021      	beq.n	80017da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001796:	f7ff f8b1 	bl	80008fc <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d302      	bcc.n	80017ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d116      	bne.n	80017da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f043 0220 	orr.w	r2, r3, #32
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e007      	b.n	80017ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e4:	2b80      	cmp	r3, #128	; 0x80
 80017e6:	d1ca      	bne.n	800177e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017fe:	e02d      	b.n	800185c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 f837 	bl	8001874 <I2C_IsAcknowledgeFailed>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e02d      	b.n	800186c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001816:	d021      	beq.n	800185c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001818:	f7ff f870 	bl	80008fc <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	429a      	cmp	r2, r3
 8001826:	d302      	bcc.n	800182e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d116      	bne.n	800185c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2220      	movs	r2, #32
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f043 0220 	orr.w	r2, r3, #32
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e007      	b.n	800186c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b04      	cmp	r3, #4
 8001868:	d1ca      	bne.n	8001800 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d11b      	bne.n	80018c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001894:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f043 0204 	orr.w	r2, r3, #4
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e272      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8087 	beq.w	80019fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f0:	4b92      	ldr	r3, [pc, #584]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d00c      	beq.n	8001916 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018fc:	4b8f      	ldr	r3, [pc, #572]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d112      	bne.n	800192e <HAL_RCC_OscConfig+0x5e>
 8001908:	4b8c      	ldr	r3, [pc, #560]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001914:	d10b      	bne.n	800192e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001916:	4b89      	ldr	r3, [pc, #548]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d06c      	beq.n	80019fc <HAL_RCC_OscConfig+0x12c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d168      	bne.n	80019fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e24c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x76>
 8001938:	4b80      	ldr	r3, [pc, #512]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a7f      	ldr	r2, [pc, #508]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800193e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e02e      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x98>
 800194e:	4b7b      	ldr	r3, [pc, #492]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a7a      	ldr	r2, [pc, #488]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b78      	ldr	r3, [pc, #480]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a77      	ldr	r2, [pc, #476]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e01d      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0xbc>
 8001972:	4b72      	ldr	r3, [pc, #456]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a71      	ldr	r2, [pc, #452]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a6e      	ldr	r2, [pc, #440]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 800198c:	4b6b      	ldr	r3, [pc, #428]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a6a      	ldr	r2, [pc, #424]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a67      	ldr	r2, [pc, #412]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800199e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d013      	beq.n	80019d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7fe ffa6 	bl	80008fc <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7fe ffa2 	bl	80008fc <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e200      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0xe4>
 80019d2:	e014      	b.n	80019fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7fe ff92 	bl	80008fc <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7fe ff8e 	bl	80008fc <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e1ec      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x10c>
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d063      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a0a:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a16:	4b49      	ldr	r3, [pc, #292]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d11c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x18c>
 8001a22:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d116      	bne.n	8001a5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2e:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <HAL_RCC_OscConfig+0x176>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e1c0      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a46:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4939      	ldr	r1, [pc, #228]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5a:	e03a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d020      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a64:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7fe ff47 	bl	80008fc <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a72:	f7fe ff43 	bl	80008fc <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1a1      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4927      	ldr	r1, [pc, #156]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
 8001aa4:	e015      	b.n	8001ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7fe ff26 	bl	80008fc <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7fe ff22 	bl	80008fc <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e180      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d03a      	beq.n	8001b54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d019      	beq.n	8001b1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7fe ff06 	bl	80008fc <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af4:	f7fe ff02 	bl	80008fc <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e160      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f000 fac4 	bl	80020a0 <RCC_Delay>
 8001b18:	e01c      	b.n	8001b54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7fe feec 	bl	80008fc <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b26:	e00f      	b.n	8001b48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7fe fee8 	bl	80008fc <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d908      	bls.n	8001b48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e146      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	42420000 	.word	0x42420000
 8001b44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	4b92      	ldr	r3, [pc, #584]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e9      	bne.n	8001b28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80a6 	beq.w	8001cae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b66:	4b8b      	ldr	r3, [pc, #556]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10d      	bne.n	8001b8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a87      	ldr	r2, [pc, #540]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	61d3      	str	r3, [r2, #28]
 8001b7e:	4b85      	ldr	r3, [pc, #532]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b82      	ldr	r3, [pc, #520]	; (8001d98 <HAL_RCC_OscConfig+0x4c8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d118      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9a:	4b7f      	ldr	r3, [pc, #508]	; (8001d98 <HAL_RCC_OscConfig+0x4c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a7e      	ldr	r2, [pc, #504]	; (8001d98 <HAL_RCC_OscConfig+0x4c8>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba6:	f7fe fea9 	bl	80008fc <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bae:	f7fe fea5 	bl	80008fc <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b64      	cmp	r3, #100	; 0x64
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e103      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4b75      	ldr	r3, [pc, #468]	; (8001d98 <HAL_RCC_OscConfig+0x4c8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x312>
 8001bd4:	4b6f      	ldr	r3, [pc, #444]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a6e      	ldr	r2, [pc, #440]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	e02d      	b.n	8001c3e <HAL_RCC_OscConfig+0x36e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x334>
 8001bea:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a69      	ldr	r2, [pc, #420]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a66      	ldr	r2, [pc, #408]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	e01c      	b.n	8001c3e <HAL_RCC_OscConfig+0x36e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d10c      	bne.n	8001c26 <HAL_RCC_OscConfig+0x356>
 8001c0c:	4b61      	ldr	r3, [pc, #388]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a60      	ldr	r2, [pc, #384]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6213      	str	r3, [r2, #32]
 8001c18:	4b5e      	ldr	r3, [pc, #376]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a5d      	ldr	r2, [pc, #372]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	e00b      	b.n	8001c3e <HAL_RCC_OscConfig+0x36e>
 8001c26:	4b5b      	ldr	r3, [pc, #364]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a5a      	ldr	r2, [pc, #360]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a57      	ldr	r2, [pc, #348]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d015      	beq.n	8001c72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7fe fe59 	bl	80008fc <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7fe fe55 	bl	80008fc <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e0b1      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c64:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ee      	beq.n	8001c4e <HAL_RCC_OscConfig+0x37e>
 8001c70:	e014      	b.n	8001c9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7fe fe43 	bl	80008fc <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7fe fe3f 	bl	80008fc <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e09b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c90:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1ee      	bne.n	8001c7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d105      	bne.n	8001cae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca2:	4b3c      	ldr	r3, [pc, #240]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a3b      	ldr	r2, [pc, #236]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8087 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d061      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d146      	bne.n	8001d5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_RCC_OscConfig+0x4cc>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7fe fe13 	bl	80008fc <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7fe fe0f 	bl	80008fc <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e06d      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cec:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d00:	d108      	bne.n	8001d14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	4921      	ldr	r1, [pc, #132]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a19      	ldr	r1, [r3, #32]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	430b      	orrs	r3, r1
 8001d26:	491b      	ldr	r1, [pc, #108]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_RCC_OscConfig+0x4cc>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7fe fde3 	bl	80008fc <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7fe fddf 	bl	80008fc <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e03d      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x46a>
 8001d58:	e035      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_RCC_OscConfig+0x4cc>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7fe fdcc 	bl	80008fc <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe fdc8 	bl	80008fc <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e026      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x498>
 8001d86:	e01e      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e019      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x500>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0d0      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d910      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 0207 	bic.w	r2, r3, #7
 8001dfe:	4965      	ldr	r1, [pc, #404]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0b8      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d020      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e30:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	494d      	ldr	r1, [pc, #308]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d040      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d115      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e07f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e073      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e06b      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b39      	ldr	r3, [pc, #228]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4936      	ldr	r1, [pc, #216]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fd1a 	bl	80008fc <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7fe fd16 	bl	80008fc <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e053      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d210      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 0207 	bic.w	r2, r3, #7
 8001f0a:	4922      	ldr	r1, [pc, #136]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e032      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4916      	ldr	r1, [pc, #88]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	490e      	ldr	r1, [pc, #56]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f62:	f000 f821 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	490a      	ldr	r1, [pc, #40]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f74:	5ccb      	ldrb	r3, [r1, r3]
 8001f76:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7a:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8001f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fc78 	bl	8000878 <HAL_InitTick>

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	0800337c 	.word	0x0800337c
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa8:	b490      	push	{r4, r7}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fae:	4b29      	ldr	r3, [pc, #164]	; (8002054 <HAL_RCC_GetSysClockFreq+0xac>)
 8001fb0:	1d3c      	adds	r4, r7, #4
 8001fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fb8:	f240 2301 	movw	r3, #513	; 0x201
 8001fbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fd2:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d002      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x46>
 8001fe6:	e02b      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fea:	623b      	str	r3, [r7, #32]
      break;
 8001fec:	e02b      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	0c9b      	lsrs	r3, r3, #18
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3328      	adds	r3, #40	; 0x28
 8001ff8:	443b      	add	r3, r7
 8001ffa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ffe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d012      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_RCC_GetSysClockFreq+0xb0>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	0c5b      	lsrs	r3, r3, #17
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	3328      	adds	r3, #40	; 0x28
 8002016:	443b      	add	r3, r7
 8002018:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800201c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	4a0e      	ldr	r2, [pc, #56]	; (800205c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002022:	fb03 f202 	mul.w	r2, r3, r2
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
 800202e:	e004      	b.n	800203a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	623b      	str	r3, [r7, #32]
      break;
 800203e:	e002      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002042:	623b      	str	r3, [r7, #32]
      break;
 8002044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002046:	6a3b      	ldr	r3, [r7, #32]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3728      	adds	r7, #40	; 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bc90      	pop	{r4, r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	08003350 	.word	0x08003350
 8002058:	40021000 	.word	0x40021000
 800205c:	007a1200 	.word	0x007a1200
 8002060:	003d0900 	.word	0x003d0900

08002064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002068:	4b02      	ldr	r3, [pc, #8]	; (8002074 <HAL_RCC_GetHCLKFreq+0x10>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	20000000 	.word	0x20000000

08002078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800207c:	f7ff fff2 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4903      	ldr	r1, [pc, #12]	; (800209c <HAL_RCC_GetPCLK1Freq+0x24>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	0800338c 	.word	0x0800338c

080020a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <RCC_Delay+0x34>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <RCC_Delay+0x38>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0a5b      	lsrs	r3, r3, #9
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020bc:	bf00      	nop
  }
  while (Delay --);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1e5a      	subs	r2, r3, #1
 80020c2:	60fa      	str	r2, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f9      	bne.n	80020bc <RCC_Delay+0x1c>
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	20000000 	.word	0x20000000
 80020d8:	10624dd3 	.word	0x10624dd3

080020dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e041      	b.n	8002172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fafc 	bl	8000700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f000 faaa 	bl	8002674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e041      	b.n	8002210 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d106      	bne.n	80021a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f839 	bl	8002218 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	4619      	mov	r1, r3
 80021b8:	4610      	mov	r0, r2
 80021ba:	f000 fa5b 	bl	8002674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
	...

0800222c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_TIM_PWM_Start+0x24>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e022      	b.n	8002296 <HAL_TIM_PWM_Start+0x6a>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d109      	bne.n	800226a <HAL_TIM_PWM_Start+0x3e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	e015      	b.n	8002296 <HAL_TIM_PWM_Start+0x6a>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d109      	bne.n	8002284 <HAL_TIM_PWM_Start+0x58>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e008      	b.n	8002296 <HAL_TIM_PWM_Start+0x6a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	bf14      	ite	ne
 8002290:	2301      	movne	r3, #1
 8002292:	2300      	moveq	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e05e      	b.n	800235c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d104      	bne.n	80022ae <HAL_TIM_PWM_Start+0x82>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ac:	e013      	b.n	80022d6 <HAL_TIM_PWM_Start+0xaa>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d104      	bne.n	80022be <HAL_TIM_PWM_Start+0x92>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022bc:	e00b      	b.n	80022d6 <HAL_TIM_PWM_Start+0xaa>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d104      	bne.n	80022ce <HAL_TIM_PWM_Start+0xa2>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022cc:	e003      	b.n	80022d6 <HAL_TIM_PWM_Start+0xaa>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2201      	movs	r2, #1
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fc48 	bl	8002b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <HAL_TIM_PWM_Start+0x138>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d107      	bne.n	80022fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a18      	ldr	r2, [pc, #96]	; (8002364 <HAL_TIM_PWM_Start+0x138>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00e      	beq.n	8002326 <HAL_TIM_PWM_Start+0xfa>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002310:	d009      	beq.n	8002326 <HAL_TIM_PWM_Start+0xfa>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <HAL_TIM_PWM_Start+0x13c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d004      	beq.n	8002326 <HAL_TIM_PWM_Start+0xfa>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a12      	ldr	r2, [pc, #72]	; (800236c <HAL_TIM_PWM_Start+0x140>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d111      	bne.n	800234a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b06      	cmp	r3, #6
 8002336:	d010      	beq.n	800235a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002348:	e007      	b.n	800235a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0201 	orr.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40012c00 	.word	0x40012c00
 8002368:	40000400 	.word	0x40000400
 800236c:	40000800 	.word	0x40000800

08002370 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002386:	2302      	movs	r3, #2
 8002388:	e0ac      	b.n	80024e4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	f200 809f 	bhi.w	80024d8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800239a:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	080023d5 	.word	0x080023d5
 80023a4:	080024d9 	.word	0x080024d9
 80023a8:	080024d9 	.word	0x080024d9
 80023ac:	080024d9 	.word	0x080024d9
 80023b0:	08002415 	.word	0x08002415
 80023b4:	080024d9 	.word	0x080024d9
 80023b8:	080024d9 	.word	0x080024d9
 80023bc:	080024d9 	.word	0x080024d9
 80023c0:	08002457 	.word	0x08002457
 80023c4:	080024d9 	.word	0x080024d9
 80023c8:	080024d9 	.word	0x080024d9
 80023cc:	080024d9 	.word	0x080024d9
 80023d0:	08002497 	.word	0x08002497
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f9ac 	bl	8002738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0208 	orr.w	r2, r2, #8
 80023ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0204 	bic.w	r2, r2, #4
 80023fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6999      	ldr	r1, [r3, #24]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	619a      	str	r2, [r3, #24]
      break;
 8002412:	e062      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f9f2 	bl	8002804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800242e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6999      	ldr	r1, [r3, #24]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	021a      	lsls	r2, r3, #8
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	619a      	str	r2, [r3, #24]
      break;
 8002454:	e041      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fa3b 	bl	80028d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69da      	ldr	r2, [r3, #28]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0208 	orr.w	r2, r2, #8
 8002470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0204 	bic.w	r2, r2, #4
 8002480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69d9      	ldr	r1, [r3, #28]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	61da      	str	r2, [r3, #28]
      break;
 8002494:	e021      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68b9      	ldr	r1, [r7, #8]
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fa85 	bl	80029ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69da      	ldr	r2, [r3, #28]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	69d9      	ldr	r1, [r3, #28]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	021a      	lsls	r2, r3, #8
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	61da      	str	r2, [r3, #28]
      break;
 80024d6:	e000      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80024d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_TIM_ConfigClockSource+0x18>
 8002500:	2302      	movs	r3, #2
 8002502:	e0b3      	b.n	800266c <HAL_TIM_ConfigClockSource+0x180>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002522:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800252a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253c:	d03e      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0xd0>
 800253e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002542:	f200 8087 	bhi.w	8002654 <HAL_TIM_ConfigClockSource+0x168>
 8002546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254a:	f000 8085 	beq.w	8002658 <HAL_TIM_ConfigClockSource+0x16c>
 800254e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002552:	d87f      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x168>
 8002554:	2b70      	cmp	r3, #112	; 0x70
 8002556:	d01a      	beq.n	800258e <HAL_TIM_ConfigClockSource+0xa2>
 8002558:	2b70      	cmp	r3, #112	; 0x70
 800255a:	d87b      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x168>
 800255c:	2b60      	cmp	r3, #96	; 0x60
 800255e:	d050      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x116>
 8002560:	2b60      	cmp	r3, #96	; 0x60
 8002562:	d877      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x168>
 8002564:	2b50      	cmp	r3, #80	; 0x50
 8002566:	d03c      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0xf6>
 8002568:	2b50      	cmp	r3, #80	; 0x50
 800256a:	d873      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x168>
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d058      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x136>
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d86f      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x168>
 8002574:	2b30      	cmp	r3, #48	; 0x30
 8002576:	d064      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0x156>
 8002578:	2b30      	cmp	r3, #48	; 0x30
 800257a:	d86b      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x168>
 800257c:	2b20      	cmp	r3, #32
 800257e:	d060      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0x156>
 8002580:	2b20      	cmp	r3, #32
 8002582:	d867      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x168>
 8002584:	2b00      	cmp	r3, #0
 8002586:	d05c      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0x156>
 8002588:	2b10      	cmp	r3, #16
 800258a:	d05a      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800258c:	e062      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6899      	ldr	r1, [r3, #8]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f000 faca 	bl	8002b36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	609a      	str	r2, [r3, #8]
      break;
 80025ba:	e04e      	b.n	800265a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6899      	ldr	r1, [r3, #8]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f000 fab3 	bl	8002b36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025de:	609a      	str	r2, [r3, #8]
      break;
 80025e0:	e03b      	b.n	800265a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f000 fa2a 	bl	8002a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2150      	movs	r1, #80	; 0x50
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fa81 	bl	8002b02 <TIM_ITRx_SetConfig>
      break;
 8002600:	e02b      	b.n	800265a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	461a      	mov	r2, r3
 8002610:	f000 fa48 	bl	8002aa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2160      	movs	r1, #96	; 0x60
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fa71 	bl	8002b02 <TIM_ITRx_SetConfig>
      break;
 8002620:	e01b      	b.n	800265a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6859      	ldr	r1, [r3, #4]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	461a      	mov	r2, r3
 8002630:	f000 fa0a 	bl	8002a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2140      	movs	r1, #64	; 0x40
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fa61 	bl	8002b02 <TIM_ITRx_SetConfig>
      break;
 8002640:	e00b      	b.n	800265a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4619      	mov	r1, r3
 800264c:	4610      	mov	r0, r2
 800264e:	f000 fa58 	bl	8002b02 <TIM_ITRx_SetConfig>
        break;
 8002652:	e002      	b.n	800265a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002654:	bf00      	nop
 8002656:	e000      	b.n	800265a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002658:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a29      	ldr	r2, [pc, #164]	; (800272c <TIM_Base_SetConfig+0xb8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00b      	beq.n	80026a4 <TIM_Base_SetConfig+0x30>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002692:	d007      	beq.n	80026a4 <TIM_Base_SetConfig+0x30>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a26      	ldr	r2, [pc, #152]	; (8002730 <TIM_Base_SetConfig+0xbc>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d003      	beq.n	80026a4 <TIM_Base_SetConfig+0x30>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a25      	ldr	r2, [pc, #148]	; (8002734 <TIM_Base_SetConfig+0xc0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d108      	bne.n	80026b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a1c      	ldr	r2, [pc, #112]	; (800272c <TIM_Base_SetConfig+0xb8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00b      	beq.n	80026d6 <TIM_Base_SetConfig+0x62>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c4:	d007      	beq.n	80026d6 <TIM_Base_SetConfig+0x62>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a19      	ldr	r2, [pc, #100]	; (8002730 <TIM_Base_SetConfig+0xbc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d003      	beq.n	80026d6 <TIM_Base_SetConfig+0x62>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a18      	ldr	r2, [pc, #96]	; (8002734 <TIM_Base_SetConfig+0xc0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d108      	bne.n	80026e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a07      	ldr	r2, [pc, #28]	; (800272c <TIM_Base_SetConfig+0xb8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d103      	bne.n	800271c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	615a      	str	r2, [r3, #20]
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40000400 	.word	0x40000400
 8002734:	40000800 	.word	0x40000800

08002738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f023 0201 	bic.w	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f023 0302 	bic.w	r3, r3, #2
 8002780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <TIM_OC1_SetConfig+0xc8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d10c      	bne.n	80027ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f023 0308 	bic.w	r3, r3, #8
 800279a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a13      	ldr	r2, [pc, #76]	; (8002800 <TIM_OC1_SetConfig+0xc8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d111      	bne.n	80027da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	621a      	str	r2, [r3, #32]
}
 80027f4:	bf00      	nop
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40012c00 	.word	0x40012c00

08002804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f023 0210 	bic.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f023 0320 	bic.w	r3, r3, #32
 800284e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <TIM_OC2_SetConfig+0xd0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d10d      	bne.n	8002880 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800286a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800287e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <TIM_OC2_SetConfig+0xd0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d113      	bne.n	80028b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800288e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002896:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	621a      	str	r2, [r3, #32]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40012c00 	.word	0x40012c00

080028d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0303 	bic.w	r3, r3, #3
 800290e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <TIM_OC3_SetConfig+0xd0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10d      	bne.n	8002952 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800293c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <TIM_OC3_SetConfig+0xd0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d113      	bne.n	8002982 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	621a      	str	r2, [r3, #32]
}
 800299c:	bf00      	nop
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40012c00 	.word	0x40012c00

080029ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	031b      	lsls	r3, r3, #12
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a0f      	ldr	r2, [pc, #60]	; (8002a44 <TIM_OC4_SetConfig+0x98>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d109      	bne.n	8002a20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	019b      	lsls	r3, r3, #6
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	621a      	str	r2, [r3, #32]
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	40012c00 	.word	0x40012c00

08002a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f023 0201 	bic.w	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f023 030a 	bic.w	r3, r3, #10
 8002a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	621a      	str	r2, [r3, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f023 0210 	bic.w	r2, r3, #16
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ace:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	031b      	lsls	r3, r3, #12
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ae0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	621a      	str	r2, [r3, #32]
}
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f043 0307 	orr.w	r3, r3, #7
 8002b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	609a      	str	r2, [r3, #8]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b087      	sub	sp, #28
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	021a      	lsls	r2, r3, #8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	609a      	str	r2, [r3, #8]
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2201      	movs	r2, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a1a      	ldr	r2, [r3, #32]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	401a      	ands	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a1a      	ldr	r2, [r3, #32]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	621a      	str	r2, [r3, #32]
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e046      	b.n	8002c62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a16      	ldr	r2, [pc, #88]	; (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00e      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c20:	d009      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d10c      	bne.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800

08002c78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e03d      	b.n	8002d10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
	...

08002d1c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002d22:	f000 fa1f 	bl	8003164 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002d26:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	2178      	movs	r1, #120	; 0x78
 8002d2e:	485b      	ldr	r0, [pc, #364]	; (8002e9c <SSD1306_Init+0x180>)
 8002d30:	f7fe fa98 	bl	8001264 <HAL_I2C_IsDeviceReady>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e0a9      	b.n	8002e92 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002d3e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002d42:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d44:	e002      	b.n	8002d4c <SSD1306_Init+0x30>
		p--;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f9      	bne.n	8002d46 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002d52:	22ae      	movs	r2, #174	; 0xae
 8002d54:	2100      	movs	r1, #0
 8002d56:	2078      	movs	r0, #120	; 0x78
 8002d58:	f000 fa7e 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	2100      	movs	r1, #0
 8002d60:	2078      	movs	r0, #120	; 0x78
 8002d62:	f000 fa79 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002d66:	2210      	movs	r2, #16
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2078      	movs	r0, #120	; 0x78
 8002d6c:	f000 fa74 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002d70:	22b0      	movs	r2, #176	; 0xb0
 8002d72:	2100      	movs	r1, #0
 8002d74:	2078      	movs	r0, #120	; 0x78
 8002d76:	f000 fa6f 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002d7a:	22c8      	movs	r2, #200	; 0xc8
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2078      	movs	r0, #120	; 0x78
 8002d80:	f000 fa6a 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002d84:	2200      	movs	r2, #0
 8002d86:	2100      	movs	r1, #0
 8002d88:	2078      	movs	r0, #120	; 0x78
 8002d8a:	f000 fa65 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002d8e:	2210      	movs	r2, #16
 8002d90:	2100      	movs	r1, #0
 8002d92:	2078      	movs	r0, #120	; 0x78
 8002d94:	f000 fa60 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002d98:	2240      	movs	r2, #64	; 0x40
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	2078      	movs	r0, #120	; 0x78
 8002d9e:	f000 fa5b 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002da2:	2281      	movs	r2, #129	; 0x81
 8002da4:	2100      	movs	r1, #0
 8002da6:	2078      	movs	r0, #120	; 0x78
 8002da8:	f000 fa56 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	2100      	movs	r1, #0
 8002db0:	2078      	movs	r0, #120	; 0x78
 8002db2:	f000 fa51 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002db6:	22a1      	movs	r2, #161	; 0xa1
 8002db8:	2100      	movs	r1, #0
 8002dba:	2078      	movs	r0, #120	; 0x78
 8002dbc:	f000 fa4c 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002dc0:	22a6      	movs	r2, #166	; 0xa6
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	2078      	movs	r0, #120	; 0x78
 8002dc6:	f000 fa47 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002dca:	22a8      	movs	r2, #168	; 0xa8
 8002dcc:	2100      	movs	r1, #0
 8002dce:	2078      	movs	r0, #120	; 0x78
 8002dd0:	f000 fa42 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002dd4:	223f      	movs	r2, #63	; 0x3f
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	2078      	movs	r0, #120	; 0x78
 8002dda:	f000 fa3d 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002dde:	22a4      	movs	r2, #164	; 0xa4
 8002de0:	2100      	movs	r1, #0
 8002de2:	2078      	movs	r0, #120	; 0x78
 8002de4:	f000 fa38 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002de8:	22d3      	movs	r2, #211	; 0xd3
 8002dea:	2100      	movs	r1, #0
 8002dec:	2078      	movs	r0, #120	; 0x78
 8002dee:	f000 fa33 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	2078      	movs	r0, #120	; 0x78
 8002df8:	f000 fa2e 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002dfc:	22d5      	movs	r2, #213	; 0xd5
 8002dfe:	2100      	movs	r1, #0
 8002e00:	2078      	movs	r0, #120	; 0x78
 8002e02:	f000 fa29 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002e06:	22f0      	movs	r2, #240	; 0xf0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	2078      	movs	r0, #120	; 0x78
 8002e0c:	f000 fa24 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002e10:	22d9      	movs	r2, #217	; 0xd9
 8002e12:	2100      	movs	r1, #0
 8002e14:	2078      	movs	r0, #120	; 0x78
 8002e16:	f000 fa1f 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002e1a:	2222      	movs	r2, #34	; 0x22
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	2078      	movs	r0, #120	; 0x78
 8002e20:	f000 fa1a 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002e24:	22da      	movs	r2, #218	; 0xda
 8002e26:	2100      	movs	r1, #0
 8002e28:	2078      	movs	r0, #120	; 0x78
 8002e2a:	f000 fa15 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002e2e:	2212      	movs	r2, #18
 8002e30:	2100      	movs	r1, #0
 8002e32:	2078      	movs	r0, #120	; 0x78
 8002e34:	f000 fa10 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002e38:	22db      	movs	r2, #219	; 0xdb
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2078      	movs	r0, #120	; 0x78
 8002e3e:	f000 fa0b 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002e42:	2220      	movs	r2, #32
 8002e44:	2100      	movs	r1, #0
 8002e46:	2078      	movs	r0, #120	; 0x78
 8002e48:	f000 fa06 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002e4c:	228d      	movs	r2, #141	; 0x8d
 8002e4e:	2100      	movs	r1, #0
 8002e50:	2078      	movs	r0, #120	; 0x78
 8002e52:	f000 fa01 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002e56:	2214      	movs	r2, #20
 8002e58:	2100      	movs	r1, #0
 8002e5a:	2078      	movs	r0, #120	; 0x78
 8002e5c:	f000 f9fc 	bl	8003258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002e60:	22af      	movs	r2, #175	; 0xaf
 8002e62:	2100      	movs	r1, #0
 8002e64:	2078      	movs	r0, #120	; 0x78
 8002e66:	f000 f9f7 	bl	8003258 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002e6a:	222e      	movs	r2, #46	; 0x2e
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	2078      	movs	r0, #120	; 0x78
 8002e70:	f000 f9f2 	bl	8003258 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f000 f843 	bl	8002f00 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002e7a:	f000 f813 	bl	8002ea4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <SSD1306_Init+0x184>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <SSD1306_Init+0x184>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SSD1306_Init+0x184>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002e90:	2301      	movs	r3, #1
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000078 	.word	0x20000078
 8002ea0:	200004dc 	.word	0x200004dc

08002ea4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002eaa:	2300      	movs	r3, #0
 8002eac:	71fb      	strb	r3, [r7, #7]
 8002eae:	e01d      	b.n	8002eec <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	3b50      	subs	r3, #80	; 0x50
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2100      	movs	r1, #0
 8002eba:	2078      	movs	r0, #120	; 0x78
 8002ebc:	f000 f9cc 	bl	8003258 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	2078      	movs	r0, #120	; 0x78
 8002ec6:	f000 f9c7 	bl	8003258 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002eca:	2210      	movs	r2, #16
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2078      	movs	r0, #120	; 0x78
 8002ed0:	f000 f9c2 	bl	8003258 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	01db      	lsls	r3, r3, #7
 8002ed8:	4a08      	ldr	r2, [pc, #32]	; (8002efc <SSD1306_UpdateScreen+0x58>)
 8002eda:	441a      	add	r2, r3
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	2140      	movs	r1, #64	; 0x40
 8002ee0:	2078      	movs	r0, #120	; 0x78
 8002ee2:	f000 f953 	bl	800318c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	2b07      	cmp	r3, #7
 8002ef0:	d9de      	bls.n	8002eb0 <SSD1306_UpdateScreen+0xc>
	}
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	200000dc 	.word	0x200000dc

08002f00 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <SSD1306_Fill+0x14>
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <SSD1306_Fill+0x16>
 8002f14:	23ff      	movs	r3, #255	; 0xff
 8002f16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4803      	ldr	r0, [pc, #12]	; (8002f2c <SSD1306_Fill+0x2c>)
 8002f1e:	f000 f9dd 	bl	80032dc <memset>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	200000dc 	.word	0x200000dc

08002f30 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	80bb      	strh	r3, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	70fb      	strb	r3, [r7, #3]
	if (
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	2b7f      	cmp	r3, #127	; 0x7f
 8002f46:	d848      	bhi.n	8002fda <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002f48:	88bb      	ldrh	r3, [r7, #4]
 8002f4a:	2b3f      	cmp	r3, #63	; 0x3f
 8002f4c:	d845      	bhi.n	8002fda <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002f4e:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <SSD1306_DrawPixel+0xb4>)
 8002f50:	791b      	ldrb	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d11a      	bne.n	8002fa0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f6a:	88fa      	ldrh	r2, [r7, #6]
 8002f6c:	88bb      	ldrh	r3, [r7, #4]
 8002f6e:	08db      	lsrs	r3, r3, #3
 8002f70:	b298      	uxth	r0, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	01db      	lsls	r3, r3, #7
 8002f76:	4413      	add	r3, r2
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <SSD1306_DrawPixel+0xb8>)
 8002f7a:	5cd3      	ldrb	r3, [r2, r3]
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	88bb      	ldrh	r3, [r7, #4]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	2101      	movs	r1, #1
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	b25b      	sxtb	r3, r3
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b259      	sxtb	r1, r3
 8002f90:	88fa      	ldrh	r2, [r7, #6]
 8002f92:	4603      	mov	r3, r0
 8002f94:	01db      	lsls	r3, r3, #7
 8002f96:	4413      	add	r3, r2
 8002f98:	b2c9      	uxtb	r1, r1
 8002f9a:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <SSD1306_DrawPixel+0xb8>)
 8002f9c:	54d1      	strb	r1, [r2, r3]
 8002f9e:	e01d      	b.n	8002fdc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002fa0:	88fa      	ldrh	r2, [r7, #6]
 8002fa2:	88bb      	ldrh	r3, [r7, #4]
 8002fa4:	08db      	lsrs	r3, r3, #3
 8002fa6:	b298      	uxth	r0, r3
 8002fa8:	4603      	mov	r3, r0
 8002faa:	01db      	lsls	r3, r3, #7
 8002fac:	4413      	add	r3, r2
 8002fae:	4a0e      	ldr	r2, [pc, #56]	; (8002fe8 <SSD1306_DrawPixel+0xb8>)
 8002fb0:	5cd3      	ldrb	r3, [r2, r3]
 8002fb2:	b25a      	sxtb	r2, r3
 8002fb4:	88bb      	ldrh	r3, [r7, #4]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	b25b      	sxtb	r3, r3
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	b259      	sxtb	r1, r3
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	4603      	mov	r3, r0
 8002fce:	01db      	lsls	r3, r3, #7
 8002fd0:	4413      	add	r3, r2
 8002fd2:	b2c9      	uxtb	r1, r1
 8002fd4:	4a04      	ldr	r2, [pc, #16]	; (8002fe8 <SSD1306_DrawPixel+0xb8>)
 8002fd6:	54d1      	strb	r1, [r2, r3]
 8002fd8:	e000      	b.n	8002fdc <SSD1306_DrawPixel+0xac>
		return;
 8002fda:	bf00      	nop
	}
}
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	200004dc 	.word	0x200004dc
 8002fe8:	200000dc 	.word	0x200000dc

08002fec <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	460a      	mov	r2, r1
 8002ff6:	80fb      	strh	r3, [r7, #6]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002ffc:	4a05      	ldr	r2, [pc, #20]	; (8003014 <SSD1306_GotoXY+0x28>)
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003002:	4a04      	ldr	r2, [pc, #16]	; (8003014 <SSD1306_GotoXY+0x28>)
 8003004:	88bb      	ldrh	r3, [r7, #4]
 8003006:	8053      	strh	r3, [r2, #2]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	200004dc 	.word	0x200004dc

08003018 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	71fb      	strb	r3, [r7, #7]
 8003024:	4613      	mov	r3, r2
 8003026:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003028:	4b3a      	ldr	r3, [pc, #232]	; (8003114 <SSD1306_Putc+0xfc>)
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	4413      	add	r3, r2
	if (
 8003034:	2b7f      	cmp	r3, #127	; 0x7f
 8003036:	dc07      	bgt.n	8003048 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003038:	4b36      	ldr	r3, [pc, #216]	; (8003114 <SSD1306_Putc+0xfc>)
 800303a:	885b      	ldrh	r3, [r3, #2]
 800303c:	461a      	mov	r2, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	785b      	ldrb	r3, [r3, #1]
 8003042:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003044:	2b3f      	cmp	r3, #63	; 0x3f
 8003046:	dd01      	ble.n	800304c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003048:	2300      	movs	r3, #0
 800304a:	e05e      	b.n	800310a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e04b      	b.n	80030ea <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	3b20      	subs	r3, #32
 800305a:	6839      	ldr	r1, [r7, #0]
 800305c:	7849      	ldrb	r1, [r1, #1]
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	4619      	mov	r1, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	440b      	add	r3, r1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	e030      	b.n	80030d8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003086:	4b23      	ldr	r3, [pc, #140]	; (8003114 <SSD1306_Putc+0xfc>)
 8003088:	881a      	ldrh	r2, [r3, #0]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	b29b      	uxth	r3, r3
 800308e:	4413      	add	r3, r2
 8003090:	b298      	uxth	r0, r3
 8003092:	4b20      	ldr	r3, [pc, #128]	; (8003114 <SSD1306_Putc+0xfc>)
 8003094:	885a      	ldrh	r2, [r3, #2]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	b29b      	uxth	r3, r3
 800309a:	4413      	add	r3, r2
 800309c:	b29b      	uxth	r3, r3
 800309e:	79ba      	ldrb	r2, [r7, #6]
 80030a0:	4619      	mov	r1, r3
 80030a2:	f7ff ff45 	bl	8002f30 <SSD1306_DrawPixel>
 80030a6:	e014      	b.n	80030d2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <SSD1306_Putc+0xfc>)
 80030aa:	881a      	ldrh	r2, [r3, #0]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	b298      	uxth	r0, r3
 80030b4:	4b17      	ldr	r3, [pc, #92]	; (8003114 <SSD1306_Putc+0xfc>)
 80030b6:	885a      	ldrh	r2, [r3, #2]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	4413      	add	r3, r2
 80030be:	b299      	uxth	r1, r3
 80030c0:	79bb      	ldrb	r3, [r7, #6]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	f7ff ff2f 	bl	8002f30 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	3301      	adds	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d3c8      	bcc.n	8003076 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3301      	adds	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	785b      	ldrb	r3, [r3, #1]
 80030ee:	461a      	mov	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d3ad      	bcc.n	8003052 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <SSD1306_Putc+0xfc>)
 80030f8:	881a      	ldrh	r2, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	4413      	add	r3, r2
 8003102:	b29a      	uxth	r2, r3
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <SSD1306_Putc+0xfc>)
 8003106:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003108:	79fb      	ldrb	r3, [r7, #7]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200004dc 	.word	0x200004dc

08003118 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003126:	e012      	b.n	800314e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	79fa      	ldrb	r2, [r7, #7]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff71 	bl	8003018 <SSD1306_Putc>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d002      	beq.n	8003148 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	e008      	b.n	800315a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3301      	adds	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1e8      	bne.n	8003128 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	781b      	ldrb	r3, [r3, #0]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <ssd1306_I2C_Init+0x24>)
 800316c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800316e:	e002      	b.n	8003176 <ssd1306_I2C_Init+0x12>
		p--;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f9      	bne.n	8003170 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	0003d090 	.word	0x0003d090

0800318c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b0c7      	sub	sp, #284	; 0x11c
 8003190:	af02      	add	r7, sp, #8
 8003192:	4604      	mov	r4, r0
 8003194:	4608      	mov	r0, r1
 8003196:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800319a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800319e:	600a      	str	r2, [r1, #0]
 80031a0:	4619      	mov	r1, r3
 80031a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80031aa:	4622      	mov	r2, r4
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031b2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80031b6:	4602      	mov	r2, r0
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031c2:	460a      	mov	r2, r1
 80031c4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80031c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031ce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80031d2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80031e0:	e015      	b.n	800320e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80031e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80031e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80031ea:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	441a      	add	r2, r3
 80031f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80031f6:	3301      	adds	r3, #1
 80031f8:	7811      	ldrb	r1, [r2, #0]
 80031fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80031fe:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003202:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003204:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003208:	3301      	adds	r3, #1
 800320a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800320e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003212:	b29b      	uxth	r3, r3
 8003214:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003218:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800321c:	8812      	ldrh	r2, [r2, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d8df      	bhi.n	80031e2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003222:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003226:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	b299      	uxth	r1, r3
 800322e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003232:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	3301      	adds	r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	f107 020c 	add.w	r2, r7, #12
 8003240:	200a      	movs	r0, #10
 8003242:	9000      	str	r0, [sp, #0]
 8003244:	4803      	ldr	r0, [pc, #12]	; (8003254 <ssd1306_I2C_WriteMulti+0xc8>)
 8003246:	f7fd ff0f 	bl	8001068 <HAL_I2C_Master_Transmit>
}
 800324a:	bf00      	nop
 800324c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003250:	46bd      	mov	sp, r7
 8003252:	bd90      	pop	{r4, r7, pc}
 8003254:	20000078 	.word	0x20000078

08003258 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af02      	add	r7, sp, #8
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
 8003262:	460b      	mov	r3, r1
 8003264:	71bb      	strb	r3, [r7, #6]
 8003266:	4613      	mov	r3, r2
 8003268:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800326a:	79bb      	ldrb	r3, [r7, #6]
 800326c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800326e:	797b      	ldrb	r3, [r7, #5]
 8003270:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	b299      	uxth	r1, r3
 8003276:	f107 020c 	add.w	r2, r7, #12
 800327a:	230a      	movs	r3, #10
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	2302      	movs	r3, #2
 8003280:	4803      	ldr	r0, [pc, #12]	; (8003290 <ssd1306_I2C_Write+0x38>)
 8003282:	f7fd fef1 	bl	8001068 <HAL_I2C_Master_Transmit>
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000078 	.word	0x20000078

08003294 <__libc_init_array>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	2600      	movs	r6, #0
 8003298:	4d0c      	ldr	r5, [pc, #48]	; (80032cc <__libc_init_array+0x38>)
 800329a:	4c0d      	ldr	r4, [pc, #52]	; (80032d0 <__libc_init_array+0x3c>)
 800329c:	1b64      	subs	r4, r4, r5
 800329e:	10a4      	asrs	r4, r4, #2
 80032a0:	42a6      	cmp	r6, r4
 80032a2:	d109      	bne.n	80032b8 <__libc_init_array+0x24>
 80032a4:	f000 f822 	bl	80032ec <_init>
 80032a8:	2600      	movs	r6, #0
 80032aa:	4d0a      	ldr	r5, [pc, #40]	; (80032d4 <__libc_init_array+0x40>)
 80032ac:	4c0a      	ldr	r4, [pc, #40]	; (80032d8 <__libc_init_array+0x44>)
 80032ae:	1b64      	subs	r4, r4, r5
 80032b0:	10a4      	asrs	r4, r4, #2
 80032b2:	42a6      	cmp	r6, r4
 80032b4:	d105      	bne.n	80032c2 <__libc_init_array+0x2e>
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
 80032b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032bc:	4798      	blx	r3
 80032be:	3601      	adds	r6, #1
 80032c0:	e7ee      	b.n	80032a0 <__libc_init_array+0xc>
 80032c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c6:	4798      	blx	r3
 80032c8:	3601      	adds	r6, #1
 80032ca:	e7f2      	b.n	80032b2 <__libc_init_array+0x1e>
 80032cc:	080040f0 	.word	0x080040f0
 80032d0:	080040f0 	.word	0x080040f0
 80032d4:	080040f0 	.word	0x080040f0
 80032d8:	080040f4 	.word	0x080040f4

080032dc <memset>:
 80032dc:	4603      	mov	r3, r0
 80032de:	4402      	add	r2, r0
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d100      	bne.n	80032e6 <memset+0xa>
 80032e4:	4770      	bx	lr
 80032e6:	f803 1b01 	strb.w	r1, [r3], #1
 80032ea:	e7f9      	b.n	80032e0 <memset+0x4>

080032ec <_init>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	bf00      	nop
 80032f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f2:	bc08      	pop	{r3}
 80032f4:	469e      	mov	lr, r3
 80032f6:	4770      	bx	lr

080032f8 <_fini>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	bf00      	nop
 80032fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fe:	bc08      	pop	{r3}
 8003300:	469e      	mov	lr, r3
 8003302:	4770      	bx	lr
